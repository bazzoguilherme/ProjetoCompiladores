L1: i2i rsp => rfp
subI rsp, 20 => rsp
loadAI rfp, -16 => r0
loadI 1 => r1
add r0, r1 => r0
storeAI r0 => rfp, 4
loadAI rfp, 0 => r2
loadAI rfp, 12 => rsp
loadAI rfp, 8 => rfp
jump -> r2
loadAI rfp, 0 => r3
loadAI rfp, 12 => rsp
loadAI rfp, 8 => rfp
jump -> r3
L2: i2i rsp => rfp
subI rsp, 16 => rsp
loadI 0 => r4
storeAI r4 => rbss, 0
storeAI rsp => rsp, 12
storeAI rfp => rsp, 8
loadAI rbss, 0 => r5
storeAI r5 => rsp, 16
addI rpc, 3 => r7
storeAI r7 => rsp, 0
jumpI -> L1
loadAI rsp, 4 => r6
storeAI r6 => rbss, 0
jumpI -> L0
	.file	"programa.c"
	.text
	.comm	simples1,4
	.comm	simples2,4
	.comm	if_test,4
	.comm	while_test,4
	.comm	for_test,4
	.comm	ternario_test,4
	.comm	fun1,4
	.comm	fun_add,4
	.comm	fun_mult,4
	.comm	fun3param1,4
	.comm	fib0,4
	.comm	fib1,4
	.comm	fib2,4
	.comm	fib3,4
	.comm	fib4,4
	.comm	fib5,4
	.comm	fib6,4
	.comm	fib7,4
	.comm	fib8,4
	.globl	inc
	.type	inc, @function
	.globl	main
	.type	main, @function
.L1:
inc:
	endbr64
	pushq	%rbp
	movq	%rsp, %rbp
	subq	$20, %rsp
	subq	$4, %rsp
	movl	-16(%rbp), %eax
	movl	%eax, (%rsp)
	subq	$4, %rsp
	movl	$1, (%rsp)
	movl	(%rsp), %edx
	addq	$4, %rsp
	movl	(%rsp), %eax
	addq	$4, %rsp
	addl	%edx, %eax
	subq	$4, %rsp
	movl	%eax, (%rsp)
	popq	%rbp
	ret
.L2:
main:
	endbr64
	pushq	%rbp
	movq	%rsp, %rbp
	subq	$16, %rsp
	subq	$4, %rsp
	movl	$0, (%rsp)
	movl	(%rsp), %eax
	addq	$4, %rsp
	movl	%eax, simples1(%rip)

	subq	$4, %rsp
	movl	simples1(%rip), %eax
	movl	%eax, (%rsp)
	movl	(%rsp), %eax
	addq	$4, %rsp
	movl	%eax, 16(%rsp)
	call	inc
	