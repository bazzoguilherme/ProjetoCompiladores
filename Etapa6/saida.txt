L1: i2i rsp => rfp
subI rsp, 20 => rsp
loadAI rfp, -16 => r0
loadI 1 => r1
add r0, r1 => r0
storeAI r0 => rfp, 4
loadAI rfp, 0 => r2
loadAI rfp, 12 => rsp
loadAI rfp, 8 => rfp
jump -> r2
loadAI rfp, 0 => r3
loadAI rfp, 12 => rsp
loadAI rfp, 8 => rfp
jump -> r3
L2: i2i rsp => rfp
subI rsp, 24 => rsp
loadAI rfp, -16 => r4
loadAI rfp, -20 => r5
add r4, r5 => r4
storeAI r4 => rfp, 4
loadAI rfp, 0 => r6
loadAI rfp, 12 => rsp
loadAI rfp, 8 => rfp
jump -> r6
loadAI rfp, 0 => r7
loadAI rfp, 12 => rsp
loadAI rfp, 8 => rfp
jump -> r7
L3: i2i rsp => rfp
subI rsp, 20 => rsp
storeAI rsp => rsp, 12
storeAI rfp => rsp, 8
loadI 0 => r8
storeAI r8 => rsp, -32
addI rpc, 3 => r10
storeAI r10 => rsp, 0
jumpI -> L1
loadAI rsp, 4 => r9
storeAI r9 => rbss, 0
storeAI rsp => rsp, 12
storeAI rfp => rsp, 8
loadI 5 => r11
storeAI r11 => rsp, -32
loadI 3 => r12
storeAI r12 => rsp, -36
addI rpc, 3 => r14
storeAI r14 => rsp, 0
jumpI -> L2
loadAI rsp, 4 => r13
storeAI r13 => rbss, 4
loadAI rbss, 0 => r15
loadAI rbss, 4 => r16
add r15, r16 => r15
storeAI r15 => rbss, 0
loadI 0 => r17
storeAI r17 => rfp, -16
L6: nop
loadAI rfp, -16 => r18
loadI 7 => r19
cmp_LT r18, r19 -> r20
cbr r20 -> L4, L5
L4: nop
loadAI rfp, -16 => r21
loadI 1 => r22
add r21, r22 => r21
storeAI r21 => rfp, -16
jumpI -> L6
L5: nop
loadI 10 => r23
loadI 1 => r24
add r23, r24 => r23
loadI 11 => r25
cmp_EQ r23, r25 -> r26
cbr r26 -> L7, L8
L7: nop
loadI 99 => r27
i2i r27 => r29
jumpI -> L9
L8: nop
loadI 77 => r28
i2i r28 => r29
jumpI -> L9
L9: nop
storeAI r29 => rbss, 0
loadAI rbss, 0 => r30
storeAI r30 => rfp, 4
jumpI -> L0
jumpI -> L0
	.file	"programa.c"
	.text
	.comm	simples1,4
	.comm	simples2,4
	.comm	if_test,4
	.comm	while_test,4
	.comm	for_test,4
	.comm	ternario_test,4
	.comm	fun1,4
	.comm	fun_add,4
	.comm	fun_mult,4
	.comm	fun3param1,4
	.comm	fib0,4
	.comm	fib1,4
	.comm	fib2,4
	.comm	fib3,4
	.comm	fib4,4
	.comm	fib5,4
	.comm	fib6,4
	.comm	fib7,4
	.comm	fib8,4
	.globl	inc
	.type	inc, @function
	.globl	add
	.type	add, @function
	.globl	main
	.type	main, @function
.L1:
inc:
	endbr64
	pushq	%rbp
	movq	%rsp, %rbp
	subq	$20, %rsp
	subq	$4, %rsp
	movl	-16(%rbp), %eax
	movl	%eax, (%rsp)
	subq	$4, %rsp
	movl	$1, (%rsp)
	movl	(%rsp), %edx
	addq	$4, %rsp
	movl	(%rsp), %eax
	addq	$4, %rsp
	addl	%edx, %eax
	subq	$4, %rsp
	movl	%eax, (%rsp)
	movl	(%rsp), %eax
	addq	$4, %rsp
	leave
	ret
	leave
	ret
.L2:
add:
	endbr64
	pushq	%rbp
	movq	%rsp, %rbp
	subq	$24, %rsp
	subq	$4, %rsp
	movl	-16(%rbp), %eax
	movl	%eax, (%rsp)
	subq	$4, %rsp
	movl	-20(%rbp), %eax
	movl	%eax, (%rsp)
	movl	(%rsp), %edx
	addq	$4, %rsp
	movl	(%rsp), %eax
	addq	$4, %rsp
	addl	%edx, %eax
	subq	$4, %rsp
	movl	%eax, (%rsp)
	movl	(%rsp), %eax
	addq	$4, %rsp
	leave
	ret
	leave
	ret
.L3:
main:
	endbr64
	pushq	%rbp
	movq	%rsp, %rbp
	subq	$20, %rsp
	subq	$4, %rsp
	movl	$0, (%rsp)
	movl	(%rsp), %eax
	addq	$4, %rsp
	movl	%eax, -32(%rsp)
	call	inc
	subq	$4, %rsp
	movl	%eax, (%rsp)
	movl	(%rsp), %eax
	addq	$4, %rsp
	movl	%eax, simples1(%rip)
	subq	$4, %rsp
	movl	$5, (%rsp)
	movl	(%rsp), %eax
	addq	$4, %rsp
	movl	%eax, -32(%rsp)
	subq	$4, %rsp
	movl	$3, (%rsp)
	movl	(%rsp), %eax
	addq	$4, %rsp
	movl	%eax, -36(%rsp)
	call	add
	subq	$4, %rsp
	movl	%eax, (%rsp)
	movl	(%rsp), %eax
	addq	$4, %rsp
	movl	%eax, simples2(%rip)
	subq	$4, %rsp
	movl	simples1(%rip), %eax
	movl	%eax, (%rsp)
	subq	$4, %rsp
	movl	simples2(%rip), %eax
	movl	%eax, (%rsp)
	movl	(%rsp), %edx
	addq	$4, %rsp
	movl	(%rsp), %eax
	addq	$4, %rsp
	addl	%edx, %eax
	subq	$4, %rsp
	movl	%eax, (%rsp)
	movl	(%rsp), %eax
	addq	$4, %rsp
	movl	%eax, simples1(%rip)
	subq	$4, %rsp
	movl	$0, (%rsp)
	movl	(%rsp), %eax
	addq	$4, %rsp
	movl	%eax, -16(%rbp)
.L6:
	subq	$4, %rsp
	movl	-16(%rbp), %eax
	movl	%eax, (%rsp)
	subq	$4, %rsp
	movl	$7, (%rsp)
	movl	(%rsp), %edx
	addq	$4, %rsp
	movl	(%rsp), %eax
	addq	$4, %rsp
	cmpl	%edx, %eax
	jge	.L5
.L4:
	subq	$4, %rsp
	movl	-16(%rbp), %eax
	movl	%eax, (%rsp)
	subq	$4, %rsp
	movl	$1, (%rsp)
	movl	(%rsp), %edx
	addq	$4, %rsp
	movl	(%rsp), %eax
	addq	$4, %rsp
	addl	%edx, %eax
	subq	$4, %rsp
	movl	%eax, (%rsp)
	movl	(%rsp), %eax
	addq	$4, %rsp
	movl	%eax, -16(%rbp)
	jmp	.L6
.L5:
	subq	$4, %rsp
	movl	$10, (%rsp)
	subq	$4, %rsp
	movl	$1, (%rsp)
	movl	(%rsp), %edx
	addq	$4, %rsp
	movl	(%rsp), %eax
	addq	$4, %rsp
	addl	%edx, %eax
	subq	$4, %rsp
	movl	%eax, (%rsp)
	subq	$4, %rsp
	movl	$11, (%rsp)
	movl	(%rsp), %edx
	addq	$4, %rsp
	movl	(%rsp), %eax
	addq	$4, %rsp
	cmpl	%edx, %eax
	jne	.L8
.L7:
	subq	$4, %rsp
	movl	$99, (%rsp)
	jmp	.L9
.L8:
	subq	$4, %rsp
	movl	$77, (%rsp)
	jmp	.L9
.L9:
	movl	(%rsp), %eax
	addq	$4, %rsp
	movl	%eax, simples1(%rip)
	subq	$4, %rsp
	movl	simples1(%rip), %eax
	movl	%eax, (%rsp)
	movl	(%rsp), %eax
	addq	$4, %rsp
	leave
	ret
